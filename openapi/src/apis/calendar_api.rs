/*
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`get_characters_character_id_calendar`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCharactersCharacterIdCalendarError {
    Status400(models::BadRequest),
    Status401(models::Unauthorized),
    Status403(models::Forbidden),
    Status420(models::ErrorLimited),
    Status500(models::InternalServerError),
    Status503(models::ServiceUnavailable),
    Status504(models::GatewayTimeout),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_characters_character_id_calendar_event_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCharactersCharacterIdCalendarEventIdError {
    Status400(models::BadRequest),
    Status401(models::Unauthorized),
    Status403(models::Forbidden),
    Status404(models::GetCharactersCharacterIdCalendarEventIdNotFound),
    Status420(models::ErrorLimited),
    Status500(models::InternalServerError),
    Status503(models::ServiceUnavailable),
    Status504(models::GatewayTimeout),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_characters_character_id_calendar_event_id_attendees`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCharactersCharacterIdCalendarEventIdAttendeesError {
    Status400(models::BadRequest),
    Status401(models::Unauthorized),
    Status403(models::Forbidden),
    Status404(models::GetCharactersCharacterIdCalendarEventIdAttendeesNotFound),
    Status420(models::ErrorLimited),
    Status500(models::InternalServerError),
    Status503(models::ServiceUnavailable),
    Status504(models::GatewayTimeout),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_characters_character_id_calendar_event_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCharactersCharacterIdCalendarEventIdError {
    Status400(models::BadRequest),
    Status401(models::Unauthorized),
    Status403(models::Forbidden),
    Status420(models::ErrorLimited),
    Status500(models::InternalServerError),
    Status503(models::ServiceUnavailable),
    Status504(models::GatewayTimeout),
    UnknownValue(serde_json::Value),
}


/// Get 50 event summaries from the calendar. If no from_event ID is given, the resource will return the next 50 chronological event summaries from now. If a from_event ID is specified, it will return the next 50 chronological event summaries from after that event  --- Alternate route: `/dev/characters/{character_id}/calendar/`  Alternate route: `/legacy/characters/{character_id}/calendar/`  Alternate route: `/v1/characters/{character_id}/calendar/`  Alternate route: `/v2/characters/{character_id}/calendar/`  --- This route is cached for up to 5 seconds
pub async fn get_characters_character_id_calendar(configuration: &configuration::Configuration, character_id: i32, datasource: Option<&str>, from_event: Option<i32>, if_none_match: Option<&str>, token: Option<&str>) -> Result<Vec<models::GetCharactersCharacterIdCalendar200Ok>, Error<GetCharactersCharacterIdCalendarError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_character_id = character_id;
    let p_datasource = datasource;
    let p_from_event = from_event;
    let p_if_none_match = if_none_match;
    let p_token = token;

    let uri_str = format!("{}/characters/{character_id}/calendar/", configuration.base_path, character_id=p_character_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_datasource {
        req_builder = req_builder.query(&[("datasource", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_from_event {
        req_builder = req_builder.query(&[("from_event", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_token {
        req_builder = req_builder.query(&[("token", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_if_none_match {
        req_builder = req_builder.header("If-None-Match", param_value.to_string());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::GetCharactersCharacterIdCalendar200Ok&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::GetCharactersCharacterIdCalendar200Ok&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCharactersCharacterIdCalendarError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get all the information for a specific event  --- Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/legacy/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/v4/characters/{character_id}/calendar/{event_id}/`  --- This route is cached for up to 5 seconds
pub async fn get_characters_character_id_calendar_event_id(configuration: &configuration::Configuration, character_id: i32, event_id: i32, datasource: Option<&str>, if_none_match: Option<&str>, token: Option<&str>) -> Result<models::GetCharactersCharacterIdCalendarEventIdOk, Error<GetCharactersCharacterIdCalendarEventIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_character_id = character_id;
    let p_event_id = event_id;
    let p_datasource = datasource;
    let p_if_none_match = if_none_match;
    let p_token = token;

    let uri_str = format!("{}/characters/{character_id}/calendar/{event_id}/", configuration.base_path, character_id=p_character_id, event_id=p_event_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_datasource {
        req_builder = req_builder.query(&[("datasource", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_token {
        req_builder = req_builder.query(&[("token", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_if_none_match {
        req_builder = req_builder.header("If-None-Match", param_value.to_string());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetCharactersCharacterIdCalendarEventIdOk`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetCharactersCharacterIdCalendarEventIdOk`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCharactersCharacterIdCalendarEventIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get all invited attendees for a given event  --- Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/attendees/`  Alternate route: `/legacy/characters/{character_id}/calendar/{event_id}/attendees/`  Alternate route: `/v1/characters/{character_id}/calendar/{event_id}/attendees/`  Alternate route: `/v2/characters/{character_id}/calendar/{event_id}/attendees/`  --- This route is cached for up to 600 seconds
pub async fn get_characters_character_id_calendar_event_id_attendees(configuration: &configuration::Configuration, character_id: i32, event_id: i32, datasource: Option<&str>, if_none_match: Option<&str>, token: Option<&str>) -> Result<Vec<models::GetCharactersCharacterIdCalendarEventIdAttendees200Ok>, Error<GetCharactersCharacterIdCalendarEventIdAttendeesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_character_id = character_id;
    let p_event_id = event_id;
    let p_datasource = datasource;
    let p_if_none_match = if_none_match;
    let p_token = token;

    let uri_str = format!("{}/characters/{character_id}/calendar/{event_id}/attendees/", configuration.base_path, character_id=p_character_id, event_id=p_event_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_datasource {
        req_builder = req_builder.query(&[("datasource", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_token {
        req_builder = req_builder.query(&[("token", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_if_none_match {
        req_builder = req_builder.header("If-None-Match", param_value.to_string());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::GetCharactersCharacterIdCalendarEventIdAttendees200Ok&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::GetCharactersCharacterIdCalendarEventIdAttendees200Ok&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCharactersCharacterIdCalendarEventIdAttendeesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Set your response status to an event  --- Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/legacy/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/v4/characters/{character_id}/calendar/{event_id}/`  --- This route is cached for up to 5 seconds
pub async fn put_characters_character_id_calendar_event_id(configuration: &configuration::Configuration, character_id: i32, event_id: i32, response: models::PutCharactersCharacterIdCalendarEventIdResponse, datasource: Option<&str>, token: Option<&str>) -> Result<(), Error<PutCharactersCharacterIdCalendarEventIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_character_id = character_id;
    let p_event_id = event_id;
    let p_response = response;
    let p_datasource = datasource;
    let p_token = token;

    let uri_str = format!("{}/characters/{character_id}/calendar/{event_id}/", configuration.base_path, character_id=p_character_id, event_id=p_event_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref param_value) = p_datasource {
        req_builder = req_builder.query(&[("datasource", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_token {
        req_builder = req_builder.query(&[("token", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_response);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PutCharactersCharacterIdCalendarEventIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

