/*
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`get_characters_character_id_contracts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCharactersCharacterIdContractsError {
    Status400(models::BadRequest),
    Status401(models::Unauthorized),
    Status403(models::Forbidden),
    Status420(models::ErrorLimited),
    Status500(models::InternalServerError),
    Status503(models::ServiceUnavailable),
    Status504(models::GatewayTimeout),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_characters_character_id_contracts_contract_id_bids`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCharactersCharacterIdContractsContractIdBidsError {
    Status400(models::BadRequest),
    Status401(models::Unauthorized),
    Status403(models::Forbidden),
    Status404(models::GetCharactersCharacterIdContractsContractIdBidsNotFound),
    Status420(models::ErrorLimited),
    Status500(models::InternalServerError),
    Status503(models::ServiceUnavailable),
    Status504(models::GatewayTimeout),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_characters_character_id_contracts_contract_id_items`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCharactersCharacterIdContractsContractIdItemsError {
    Status400(models::BadRequest),
    Status401(models::Unauthorized),
    Status403(models::Forbidden),
    Status404(models::GetCharactersCharacterIdContractsContractIdItemsNotFound),
    Status420(models::ErrorLimited),
    Status500(models::InternalServerError),
    Status503(models::ServiceUnavailable),
    Status504(models::GatewayTimeout),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_contracts_public_bids_contract_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetContractsPublicBidsContractIdError {
    Status400(models::BadRequest),
    Status403(models::GetContractsPublicBidsContractIdForbidden),
    Status404(models::GetContractsPublicBidsContractIdNotFound),
    Status420(models::ErrorLimited),
    Status500(models::InternalServerError),
    Status503(models::ServiceUnavailable),
    Status504(models::GatewayTimeout),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_contracts_public_items_contract_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetContractsPublicItemsContractIdError {
    Status400(models::BadRequest),
    Status403(models::GetContractsPublicItemsContractIdForbidden),
    Status404(models::GetContractsPublicItemsContractIdNotFound),
    Status420(models::ErrorLimited),
    Status500(models::InternalServerError),
    Status503(models::ServiceUnavailable),
    Status504(models::GatewayTimeout),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_contracts_public_region_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetContractsPublicRegionIdError {
    Status400(models::BadRequest),
    Status404(models::GetContractsPublicRegionIdNotFound),
    Status420(models::ErrorLimited),
    Status500(models::InternalServerError),
    Status503(models::ServiceUnavailable),
    Status504(models::GatewayTimeout),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_corporations_corporation_id_contracts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCorporationsCorporationIdContractsError {
    Status400(models::BadRequest),
    Status401(models::Unauthorized),
    Status403(models::Forbidden),
    Status420(models::ErrorLimited),
    Status500(models::InternalServerError),
    Status503(models::ServiceUnavailable),
    Status504(models::GatewayTimeout),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_corporations_corporation_id_contracts_contract_id_bids`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCorporationsCorporationIdContractsContractIdBidsError {
    Status400(models::BadRequest),
    Status401(models::Unauthorized),
    Status403(models::Forbidden),
    Status404(models::GetCorporationsCorporationIdContractsContractIdBidsNotFound),
    Status420(models::ErrorLimited),
    Status500(models::InternalServerError),
    Status503(models::ServiceUnavailable),
    Status504(models::GatewayTimeout),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_corporations_corporation_id_contracts_contract_id_items`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCorporationsCorporationIdContractsContractIdItemsError {
    Status400(models::BadRequest),
    Status401(models::Unauthorized),
    Status403(models::Forbidden),
    Status404(models::GetCorporationsCorporationIdContractsContractIdItemsNotFound),
    Status420(models::ErrorLimited),
    Status500(models::InternalServerError),
    Status503(models::ServiceUnavailable),
    Status504(models::GatewayTimeout),
    Status520(models::GetCorporationsCorporationIdContractsContractIdItemsError520),
    UnknownValue(serde_json::Value),
}


/// Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \"in_progress\".  --- Alternate route: `/dev/characters/{character_id}/contracts/`  Alternate route: `/legacy/characters/{character_id}/contracts/`  Alternate route: `/v1/characters/{character_id}/contracts/`  --- This route is cached for up to 300 seconds
pub async fn get_characters_character_id_contracts(configuration: &configuration::Configuration, character_id: i32, datasource: Option<&str>, if_none_match: Option<&str>, page: Option<i32>, token: Option<&str>) -> Result<Vec<models::GetCharactersCharacterIdContracts200Ok>, Error<GetCharactersCharacterIdContractsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_character_id = character_id;
    let p_datasource = datasource;
    let p_if_none_match = if_none_match;
    let p_page = page;
    let p_token = token;

    let uri_str = format!("{}/characters/{character_id}/contracts/", configuration.base_path, character_id=p_character_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_datasource {
        req_builder = req_builder.query(&[("datasource", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_token {
        req_builder = req_builder.query(&[("token", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_if_none_match {
        req_builder = req_builder.header("If-None-Match", param_value.to_string());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::GetCharactersCharacterIdContracts200Ok&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::GetCharactersCharacterIdContracts200Ok&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCharactersCharacterIdContractsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists bids on a particular auction contract  --- Alternate route: `/dev/characters/{character_id}/contracts/{contract_id}/bids/`  Alternate route: `/legacy/characters/{character_id}/contracts/{contract_id}/bids/`  Alternate route: `/v1/characters/{character_id}/contracts/{contract_id}/bids/`  --- This route is cached for up to 300 seconds
pub async fn get_characters_character_id_contracts_contract_id_bids(configuration: &configuration::Configuration, character_id: i32, contract_id: i32, datasource: Option<&str>, if_none_match: Option<&str>, token: Option<&str>) -> Result<Vec<models::GetCharactersCharacterIdContractsContractIdBids200Ok>, Error<GetCharactersCharacterIdContractsContractIdBidsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_character_id = character_id;
    let p_contract_id = contract_id;
    let p_datasource = datasource;
    let p_if_none_match = if_none_match;
    let p_token = token;

    let uri_str = format!("{}/characters/{character_id}/contracts/{contract_id}/bids/", configuration.base_path, character_id=p_character_id, contract_id=p_contract_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_datasource {
        req_builder = req_builder.query(&[("datasource", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_token {
        req_builder = req_builder.query(&[("token", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_if_none_match {
        req_builder = req_builder.header("If-None-Match", param_value.to_string());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::GetCharactersCharacterIdContractsContractIdBids200Ok&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::GetCharactersCharacterIdContractsContractIdBids200Ok&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCharactersCharacterIdContractsContractIdBidsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists items of a particular contract  --- Alternate route: `/dev/characters/{character_id}/contracts/{contract_id}/items/`  Alternate route: `/legacy/characters/{character_id}/contracts/{contract_id}/items/`  Alternate route: `/v1/characters/{character_id}/contracts/{contract_id}/items/`  --- This route is cached for up to 3600 seconds
pub async fn get_characters_character_id_contracts_contract_id_items(configuration: &configuration::Configuration, character_id: i32, contract_id: i32, datasource: Option<&str>, if_none_match: Option<&str>, token: Option<&str>) -> Result<Vec<models::GetCharactersCharacterIdContractsContractIdItems200Ok>, Error<GetCharactersCharacterIdContractsContractIdItemsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_character_id = character_id;
    let p_contract_id = contract_id;
    let p_datasource = datasource;
    let p_if_none_match = if_none_match;
    let p_token = token;

    let uri_str = format!("{}/characters/{character_id}/contracts/{contract_id}/items/", configuration.base_path, character_id=p_character_id, contract_id=p_contract_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_datasource {
        req_builder = req_builder.query(&[("datasource", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_token {
        req_builder = req_builder.query(&[("token", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_if_none_match {
        req_builder = req_builder.header("If-None-Match", param_value.to_string());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::GetCharactersCharacterIdContractsContractIdItems200Ok&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::GetCharactersCharacterIdContractsContractIdItems200Ok&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCharactersCharacterIdContractsContractIdItemsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists bids on a public auction contract  --- Alternate route: `/dev/contracts/public/bids/{contract_id}/`  Alternate route: `/legacy/contracts/public/bids/{contract_id}/`  Alternate route: `/v1/contracts/public/bids/{contract_id}/`  --- This route is cached for up to 300 seconds
pub async fn get_contracts_public_bids_contract_id(configuration: &configuration::Configuration, contract_id: i32, datasource: Option<&str>, if_none_match: Option<&str>, page: Option<i32>) -> Result<Vec<models::GetContractsPublicBidsContractId200Ok>, Error<GetContractsPublicBidsContractIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_contract_id = contract_id;
    let p_datasource = datasource;
    let p_if_none_match = if_none_match;
    let p_page = page;

    let uri_str = format!("{}/contracts/public/bids/{contract_id}/", configuration.base_path, contract_id=p_contract_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_datasource {
        req_builder = req_builder.query(&[("datasource", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_if_none_match {
        req_builder = req_builder.header("If-None-Match", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::GetContractsPublicBidsContractId200Ok&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::GetContractsPublicBidsContractId200Ok&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetContractsPublicBidsContractIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists items of a public contract  --- Alternate route: `/dev/contracts/public/items/{contract_id}/`  Alternate route: `/legacy/contracts/public/items/{contract_id}/`  Alternate route: `/v1/contracts/public/items/{contract_id}/`  --- This route is cached for up to 3600 seconds
pub async fn get_contracts_public_items_contract_id(configuration: &configuration::Configuration, contract_id: i32, datasource: Option<&str>, if_none_match: Option<&str>, page: Option<i32>) -> Result<Vec<models::GetContractsPublicItemsContractId200Ok>, Error<GetContractsPublicItemsContractIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_contract_id = contract_id;
    let p_datasource = datasource;
    let p_if_none_match = if_none_match;
    let p_page = page;

    let uri_str = format!("{}/contracts/public/items/{contract_id}/", configuration.base_path, contract_id=p_contract_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_datasource {
        req_builder = req_builder.query(&[("datasource", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_if_none_match {
        req_builder = req_builder.header("If-None-Match", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::GetContractsPublicItemsContractId200Ok&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::GetContractsPublicItemsContractId200Ok&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetContractsPublicItemsContractIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a paginated list of all public contracts in the given region  --- Alternate route: `/dev/contracts/public/{region_id}/`  Alternate route: `/legacy/contracts/public/{region_id}/`  Alternate route: `/v1/contracts/public/{region_id}/`  --- This route is cached for up to 1800 seconds
pub async fn get_contracts_public_region_id(configuration: &configuration::Configuration, region_id: i32, datasource: Option<&str>, if_none_match: Option<&str>, page: Option<i32>) -> Result<Vec<models::GetContractsPublicRegionId200Ok>, Error<GetContractsPublicRegionIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_region_id = region_id;
    let p_datasource = datasource;
    let p_if_none_match = if_none_match;
    let p_page = page;

    let uri_str = format!("{}/contracts/public/{region_id}/", configuration.base_path, region_id=p_region_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_datasource {
        req_builder = req_builder.query(&[("datasource", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_if_none_match {
        req_builder = req_builder.header("If-None-Match", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::GetContractsPublicRegionId200Ok&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::GetContractsPublicRegionId200Ok&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetContractsPublicRegionIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \"in_progress\".  --- Alternate route: `/dev/corporations/{corporation_id}/contracts/`  Alternate route: `/legacy/corporations/{corporation_id}/contracts/`  Alternate route: `/v1/corporations/{corporation_id}/contracts/`  --- This route is cached for up to 300 seconds
pub async fn get_corporations_corporation_id_contracts(configuration: &configuration::Configuration, corporation_id: i32, datasource: Option<&str>, if_none_match: Option<&str>, page: Option<i32>, token: Option<&str>) -> Result<Vec<models::GetCorporationsCorporationIdContracts200Ok>, Error<GetCorporationsCorporationIdContractsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_corporation_id = corporation_id;
    let p_datasource = datasource;
    let p_if_none_match = if_none_match;
    let p_page = page;
    let p_token = token;

    let uri_str = format!("{}/corporations/{corporation_id}/contracts/", configuration.base_path, corporation_id=p_corporation_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_datasource {
        req_builder = req_builder.query(&[("datasource", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_token {
        req_builder = req_builder.query(&[("token", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_if_none_match {
        req_builder = req_builder.header("If-None-Match", param_value.to_string());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::GetCorporationsCorporationIdContracts200Ok&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::GetCorporationsCorporationIdContracts200Ok&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCorporationsCorporationIdContractsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists bids on a particular auction contract  --- Alternate route: `/dev/corporations/{corporation_id}/contracts/{contract_id}/bids/`  Alternate route: `/legacy/corporations/{corporation_id}/contracts/{contract_id}/bids/`  Alternate route: `/v1/corporations/{corporation_id}/contracts/{contract_id}/bids/`  --- This route is cached for up to 3600 seconds
pub async fn get_corporations_corporation_id_contracts_contract_id_bids(configuration: &configuration::Configuration, contract_id: i32, corporation_id: i32, datasource: Option<&str>, if_none_match: Option<&str>, page: Option<i32>, token: Option<&str>) -> Result<Vec<models::GetCorporationsCorporationIdContractsContractIdBids200Ok>, Error<GetCorporationsCorporationIdContractsContractIdBidsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_contract_id = contract_id;
    let p_corporation_id = corporation_id;
    let p_datasource = datasource;
    let p_if_none_match = if_none_match;
    let p_page = page;
    let p_token = token;

    let uri_str = format!("{}/corporations/{corporation_id}/contracts/{contract_id}/bids/", configuration.base_path, contract_id=p_contract_id, corporation_id=p_corporation_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_datasource {
        req_builder = req_builder.query(&[("datasource", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_token {
        req_builder = req_builder.query(&[("token", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_if_none_match {
        req_builder = req_builder.header("If-None-Match", param_value.to_string());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::GetCorporationsCorporationIdContractsContractIdBids200Ok&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::GetCorporationsCorporationIdContractsContractIdBids200Ok&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCorporationsCorporationIdContractsContractIdBidsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists items of a particular contract  --- Alternate route: `/dev/corporations/{corporation_id}/contracts/{contract_id}/items/`  Alternate route: `/legacy/corporations/{corporation_id}/contracts/{contract_id}/items/`  Alternate route: `/v1/corporations/{corporation_id}/contracts/{contract_id}/items/`  --- This route is cached for up to 3600 seconds
pub async fn get_corporations_corporation_id_contracts_contract_id_items(configuration: &configuration::Configuration, contract_id: i32, corporation_id: i32, datasource: Option<&str>, if_none_match: Option<&str>, token: Option<&str>) -> Result<Vec<models::GetCorporationsCorporationIdContractsContractIdItems200Ok>, Error<GetCorporationsCorporationIdContractsContractIdItemsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_contract_id = contract_id;
    let p_corporation_id = corporation_id;
    let p_datasource = datasource;
    let p_if_none_match = if_none_match;
    let p_token = token;

    let uri_str = format!("{}/corporations/{corporation_id}/contracts/{contract_id}/items/", configuration.base_path, contract_id=p_contract_id, corporation_id=p_corporation_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_datasource {
        req_builder = req_builder.query(&[("datasource", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_token {
        req_builder = req_builder.query(&[("token", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_if_none_match {
        req_builder = req_builder.header("If-None-Match", param_value.to_string());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::GetCorporationsCorporationIdContractsContractIdItems200Ok&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::GetCorporationsCorporationIdContractsContractIdItems200Ok&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCorporationsCorporationIdContractsContractIdItemsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

